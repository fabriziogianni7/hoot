#!/bin/bash

# ============================================================================
# Hoot Contract Deployment Script
# ============================================================================
# Deploys the HootQuizManager smart contract to local Anvil blockchain
#
# Usage: ./deploy-contract.sh [ngrok_url]
# ============================================================================

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Configuration
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONTRACT_ADDRESS=""

# Helper functions
print_header() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}========================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

check_command() {
    if ! command -v $1 &> /dev/null; then
        print_error "$1 is not installed"
        echo "Please install $1 and try again"
        exit 1
    fi
}

print_header "üöÄ Deploying Hoot Smart Contract"

# Check prerequisites
echo -e "${BLUE}üîç Checking prerequisites...${NC}"
check_command "forge"

# Check if anvil is running
if ! lsof -i:8545 >/dev/null 2>&1; then
    print_error "Anvil blockchain is not running"
    echo "Please start Anvil first:"
    echo "  ./start-anvil.sh"
    exit 1
fi

# Change to contracts directory
cd "$PROJECT_ROOT/contracts"

# Check if .env file exists for deployment, create if needed
if [ ! -f ".env" ]; then
    print_warning "Contracts .env file not found, creating for local development"
    cat > .env << 'EOF'
# Environment variables for local development
# This file is automatically generated for local development
# For production deployments, create your own secure .env file

# Private key for deployment (anvil account 0)
PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

# Treasury address (anvil account 1)
TREASURY_ADDRESS=0x70997970C51812dc3A010C7d01b50e0d17dc79C8

# API keys for verification (not needed for local development)
BASESCAN_API_KEY=

# RPC URLs
RPC_URL_LOCAL=http://127.0.0.1:8545
RPC_URL_BASE_SEPOLIA=https://sepolia.base.org
RPC_URL_BASE=https://mainnet.base.org
EOF
    print_success "Created .env file for local development"
fi

# Deploy contract
echo -e "${BLUE}üìÑ Deploying HootQuizManager...${NC}"

# Set environment variables for deployment
export RPC_URL_LOCAL="http://localhost:8545"

# Deploy contract and capture output
echo -e "${BLUE}‚õìÔ∏è  Broadcasting deployment transaction...${NC}"
DEPLOY_OUTPUT=$(forge script script/Deploy.s.sol --rpc-url http://localhost:8545 --broadcast --json 2>&1)

if [ $? -ne 0 ]; then
    print_error "Contract deployment failed"
    echo "$DEPLOY_OUTPUT"
    exit 1
fi

# Extract contract address from deployment output
echo -e "${BLUE}üîç Extracting contract address...${NC}"
CONTRACT_ADDRESS=$(echo "$DEPLOY_OUTPUT" | grep -o '"contractAddress":"0x[^"]*"' | grep -o '0x[^"]*' | head -1)

# If we couldn't extract it, use the default
if [[ -z "$CONTRACT_ADDRESS" ]]; then
    CONTRACT_ADDRESS="0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0" # Default from contracts.ts
    print_warning "Could not extract contract address from deployment output, using default"
fi

print_success "Contract deployment completed!"
print_success "HootQuizManager deployed at: $CONTRACT_ADDRESS"

# Update frontend contracts file if ngrok URL was provided
if [[ ! -z "$1" ]]; then
    NGROK_URL="$1"
    echo -e "${BLUE}üîó Updating environment files with ngrok URL: $NGROK_URL${NC}"

    # Update backend environment file
    BACKEND_ENV_FILE="$PROJECT_ROOT/backend/supabase/functions/.env"
    if [ -f "$BACKEND_ENV_FILE" ]; then
        if grep -q "^RPC_URL_LOCAL=" "$BACKEND_ENV_FILE"; then
            sed -i.bak "s|^RPC_URL_LOCAL=.*|RPC_URL_LOCAL=$NGROK_URL|" "$BACKEND_ENV_FILE"
        else
            echo "RPC_URL_LOCAL=$NGROK_URL" >> "$BACKEND_ENV_FILE"
        fi
        print_success "Updated RPC_URL_LOCAL in backend/.env"
    fi

    # Update Supabase secrets if supabase CLI is available
    if command -v supabase &> /dev/null; then
        echo -e "${BLUE}üîê Setting Supabase secret...${NC}"
        cd "$PROJECT_ROOT/backend/supabase"
        if command -v timeout &> /dev/null; then
            timeout 10s supabase secrets set RPC_URL_LOCAL="$NGROK_URL" >/dev/null 2>&1 && print_success "Updated Supabase secret" || print_warning "Failed to update Supabase secret"
        else
            supabase secrets set RPC_URL_LOCAL="$NGROK_URL" >/dev/null 2>&1 && print_success "Updated Supabase secret" || print_warning "Failed to update Supabase secret"
        fi
    fi
fi

# Update frontend contracts file
FRONTEND_CONTRACTS_FILE="$PROJECT_ROOT/frontend/lib/contracts.ts"
if [ -f "$FRONTEND_CONTRACTS_FILE" ]; then
    echo -e "${BLUE}üìù Updating frontend contract configuration...${NC}"
    sed -i.bak "s/local: \".*\"/local: \"$CONTRACT_ADDRESS\"/" "$FRONTEND_CONTRACTS_FILE"
    print_success "Updated contract address in frontend: $CONTRACT_ADDRESS"
else
    print_warning "Frontend contracts file not found: $FRONTEND_CONTRACTS_FILE"
fi

echo ""
echo -e "${BOLD}Contract deployment summary:${NC}"
echo -e "  üìÑ Contract Address: ${GREEN}$CONTRACT_ADDRESS${NC}"
if [[ ! -z "$NGROK_URL" ]]; then
    echo -e "  üåê RPC URL: ${YELLOW}$NGROK_URL${NC}"
fi
echo ""
echo -e "${BLUE}üí° Contract is ready for use!${NC}"
