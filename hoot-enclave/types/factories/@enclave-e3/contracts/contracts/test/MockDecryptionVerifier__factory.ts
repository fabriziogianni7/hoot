/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../../../../common.js"
  import type { MockDecryptionVerifier, MockDecryptionVerifierInterface } from "../../../../../@enclave-e3/contracts/contracts/test/MockDecryptionVerifier.js";

  const _abi = [
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      },
      {
        "internalType": "bytes32",
        "name": "",
        "type": "bytes32"
      },
      {
        "internalType": "bytes",
        "name": "data",
        "type": "bytes"
      }
    ],
    "name": "verify",
    "outputs": [
      {
        "internalType": "bool",
        "name": "success",
        "type": "bool"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  }
] as const;

  const _bytecode = "0x6080604052348015600e575f5ffd5b506101778061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c80632f0e1bbf1461002d575b5f5ffd5b61004061003b36600461007c565b610054565b604051901515815260200160405180910390f35b80515f9015610061575060015b9392505050565b634e487b7160e01b5f52604160045260245ffd5b5f5f5f6060848603121561008e575f5ffd5b8335925060208401359150604084013567ffffffffffffffff8111156100b2575f5ffd5b8401601f810186136100c2575f5ffd5b803567ffffffffffffffff8111156100dc576100dc610068565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561010b5761010b610068565b604052818152828201602001881015610122575f5ffd5b816020840160208301375f60208383010152809350505050925092509256fea2646970667358221220101cc3a5258e26385e456ecd46c6286d2f066a23cd9d590e0ae2f500829fe27464736f6c634300081b0033";

  
      type MockDecryptionVerifierConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: MockDecryptionVerifierConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class MockDecryptionVerifier__factory extends ContractFactory {
    
      constructor(...args: MockDecryptionVerifierConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<MockDecryptionVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): MockDecryptionVerifier__factory {
      return super.connect(runner) as MockDecryptionVerifier__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockDecryptionVerifierInterface {
      return new Interface(_abi) as MockDecryptionVerifierInterface;
    }
    
    override attach(address: string | Addressable): MockDecryptionVerifier {
      return super.attach(address) as MockDecryptionVerifier;
    }
  static connect(address: string, runner?: ContractRunner | null): MockDecryptionVerifier {
      return new Contract(address, _abi, runner) as unknown as MockDecryptionVerifier;
    }
  }

  
  