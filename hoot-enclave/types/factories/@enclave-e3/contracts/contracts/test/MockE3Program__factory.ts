/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, AddressLike, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../../../../common.js"
  import type { MockE3Program, MockE3ProgramInterface } from "../../../../../@enclave-e3/contracts/contracts/test/MockE3Program.js";

  const _abi = [
  {
    "inputs": [
      {
        "internalType": "contract IInputValidator",
        "name": "_inputValidator",
        "type": "address"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "inputs": [],
    "name": "E3AlreadyInitialized",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "InvalidInputValidator",
    "type": "error"
  },
  {
    "inputs": [
      {
        "internalType": "bytes",
        "name": "e3ProgramParams",
        "type": "bytes"
      },
      {
        "internalType": "bytes",
        "name": "computeProviderParams",
        "type": "bytes"
      }
    ],
    "name": "invalidParams",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "ENCRYPTION_SCHEME_ID",
    "outputs": [
      {
        "internalType": "bytes32",
        "name": "",
        "type": "bytes32"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "inputValidator",
    "outputs": [
      {
        "internalType": "contract IInputValidator",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "e3Id",
        "type": "uint256"
      }
    ],
    "name": "paramsHashes",
    "outputs": [
      {
        "internalType": "bytes32",
        "name": "paramsHash",
        "type": "bytes32"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "e3Id",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      },
      {
        "internalType": "bytes",
        "name": "e3ProgramParams",
        "type": "bytes"
      },
      {
        "internalType": "bytes",
        "name": "computeProviderParams",
        "type": "bytes"
      }
    ],
    "name": "validate",
    "outputs": [
      {
        "internalType": "bytes32",
        "name": "",
        "type": "bytes32"
      },
      {
        "internalType": "contract IInputValidator",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      },
      {
        "internalType": "bytes32",
        "name": "",
        "type": "bytes32"
      },
      {
        "internalType": "bytes",
        "name": "data",
        "type": "bytes"
      }
    ],
    "name": "verify",
    "outputs": [
      {
        "internalType": "bool",
        "name": "success",
        "type": "bool"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  }
] as const;

  const _bytecode = "0x6080604052348015600e575f5ffd5b5060405161051a38038061051a833981016040819052602b916074565b6001600160a01b0381166051576040516310160a0760e11b815260040160405180910390fd5b5f80546001600160a01b0319166001600160a01b0392909216919091179055609f565b5f602082840312156083575f5ffd5b81516001600160a01b03811681146098575f5ffd5b9392505050565b61046e806100ac5f395ff3fe608060405234801561000f575f5ffd5b5060043610610064575f3560e01c806378d891871161004d57806378d89187146100bd578063a3926079146100e4578063a61d7e3e1461010e575f5ffd5b8063143c0836146100685780632f0e1bbf1461009a575b5f5ffd5b610087610076366004610219565b60016020525f908152604090205481565b6040519081526020015b60405180910390f35b6100ad6100a8366004610244565b61013e565b6040519015158152602001610091565b6100877f2c2a814a0495f913a3a312fc4771e37552bc14f8a2d4075a08122d356f0849c681565b5f546100f6906001600160a01b031681565b6040516001600160a01b039091168152602001610091565b61012161011c36600461034e565b610152565b604080519283526001600160a01b03909116602083015201610091565b80515f901561014b575060015b9392505050565b5f808585858560208114610186576040516312bed5ff60e31b815260040161017d94939291906103f8565b60405180910390fd5b5050505f898152600160205260409020541590506101b7576040516335751e3760e11b815260040160405180910390fd5b85856040516101c7929190610429565b60408051918290039091205f8a8152600160205291822055547f2c2a814a0495f913a3a312fc4771e37552bc14f8a2d4075a08122d356f0849c692506001600160a01b03169050965096945050505050565b5f60208284031215610229575f5ffd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b5f5f5f60608486031215610256575f5ffd5b8335925060208401359150604084013567ffffffffffffffff81111561027a575f5ffd5b8401601f8101861361028a575f5ffd5b803567ffffffffffffffff8111156102a4576102a4610230565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156102d3576102d3610230565b6040528181528282016020018810156102ea575f5ffd5b816020840160208301375f602083830101528093505050509250925092565b5f5f83601f840112610319575f5ffd5b50813567ffffffffffffffff811115610330575f5ffd5b602083019150836020828501011115610347575f5ffd5b9250929050565b5f5f5f5f5f5f60808789031215610363575f5ffd5b8635955060208701359450604087013567ffffffffffffffff811115610387575f5ffd5b61039389828a01610309565b909550935050606087013567ffffffffffffffff8111156103b2575f5ffd5b6103be89828a01610309565b979a9699509497509295939492505050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b604081525f61040b6040830186886103d0565b828103602084015261041e8185876103d0565b979650505050505050565b818382375f910190815291905056fea26469706673582212206411343bf12526a063b07c07b6e8eaef992340a9ad25b0883d81665b28b0b89964736f6c634300081b0033";

  
      type MockE3ProgramConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: MockE3ProgramConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class MockE3Program__factory extends ContractFactory {
    
      constructor(...args: MockE3ProgramConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(_inputValidator: AddressLike, overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(_inputValidator, overrides || {});
    };
    override deploy(_inputValidator: AddressLike, overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(_inputValidator, overrides || {}) as Promise<MockE3Program & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): MockE3Program__factory {
      return super.connect(runner) as MockE3Program__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockE3ProgramInterface {
      return new Interface(_abi) as MockE3ProgramInterface;
    }
    
    override attach(address: string | Addressable): MockE3Program {
      return super.attach(address) as MockE3Program;
    }
  static connect(address: string, runner?: ContractRunner | null): MockE3Program {
      return new Contract(address, _abi, runner) as unknown as MockE3Program;
    }
  }

  
  