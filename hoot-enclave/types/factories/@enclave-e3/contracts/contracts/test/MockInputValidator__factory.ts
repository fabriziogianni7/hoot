/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../../../../common.js"
  import type { MockInputValidator, MockInputValidatorInterface } from "../../../../../@enclave-e3/contracts/contracts/test/MockInputValidator.js";

  const _abi = [
  {
    "inputs": [],
    "name": "InvalidInput",
    "type": "error"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "sender",
        "type": "address"
      },
      {
        "internalType": "bytes",
        "name": "data",
        "type": "bytes"
      }
    ],
    "name": "validate",
    "outputs": [
      {
        "internalType": "bytes",
        "name": "input",
        "type": "bytes"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  }
] as const;

  const _bytecode = "0x6080604052348015600e575f5ffd5b506101fd8061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063caf927851461002d575b5f5ffd5b61004061003b3660046100b4565b610056565b60405161004d9190610192565b60405180910390f35b606081516003148061007c575073ffffffffffffffffffffffffffffffffffffffff8316155b1561009a5760405163b4fa3fb360e01b815260040160405180910390fd5b50919050565b634e487b7160e01b5f52604160045260245ffd5b5f5f604083850312156100c5575f5ffd5b823573ffffffffffffffffffffffffffffffffffffffff811681146100e8575f5ffd5b9150602083013567ffffffffffffffff811115610103575f5ffd5b8301601f81018513610113575f5ffd5b803567ffffffffffffffff81111561012d5761012d6100a0565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561015c5761015c6100a0565b604052818152828201602001871015610173575f5ffd5b816020840160208301375f602083830101528093505050509250929050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f8301168401019150509291505056fea2646970667358221220d4eac771985b8de956b6e29eca6866532144b34870f5bca4cc613aabe9b0cb1564736f6c634300081b0033";

  
      type MockInputValidatorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: MockInputValidatorConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class MockInputValidator__factory extends ContractFactory {
    
      constructor(...args: MockInputValidatorConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<MockInputValidator & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): MockInputValidator__factory {
      return super.connect(runner) as MockInputValidator__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockInputValidatorInterface {
      return new Interface(_abi) as MockInputValidatorInterface;
    }
    
    override attach(address: string | Addressable): MockInputValidator {
      return super.attach(address) as MockInputValidator;
    }
  static connect(address: string, runner?: ContractRunner | null): MockInputValidator {
      return new Contract(address, _abi, runner) as unknown as MockInputValidator;
    }
  }

  
  