/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

  import { Contract, Interface, type ContractRunner } from "ethers";
  import type { IRegistry, IRegistryInterface } from "../../../../../../@enclave-e3/contracts/contracts/test/MockRegistryFilter.sol/IRegistry.js";

  const _abi = [
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "e3Id",
        "type": "uint256"
      },
      {
        "internalType": "address[]",
        "name": "ciphernodes",
        "type": "address[]"
      },
      {
        "internalType": "bytes",
        "name": "publicKey",
        "type": "bytes"
      }
    ],
    "name": "publishCommittee",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
] as const;

  export class IRegistry__factory {
    static readonly abi = _abi;
    static createInterface(): IRegistryInterface {
      return new Interface(_abi) as IRegistryInterface;
    }
    static connect(address: string, runner?: ContractRunner | null): IRegistry {
      return new Contract(address, _abi, runner) as unknown as IRegistry;
    }
  }
  