/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../../../../common.js"
  import type { MockComputeProvider, MockComputeProviderInterface } from "../../../../../@enclave-e3/contracts/contracts/test/MockComputeProvider.js";

  const _abi = [
  {
    "inputs": [],
    "name": "invalidParams",
    "type": "error"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      },
      {
        "internalType": "bytes",
        "name": "params",
        "type": "bytes"
      }
    ],
    "name": "validate",
    "outputs": [
      {
        "internalType": "contract IDecryptionVerifier",
        "name": "decryptionVerifier",
        "type": "address"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  }
] as const;

  const _bytecode = "0x6080604052348015600e575f5ffd5b506101f88061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c806323e7fd591461002d575b5f5ffd5b61004061003b3660046100c3565b610069565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b5f815160201461008c5760405163be64db2760e01b815260040160405180910390fd5b60208201519050818060200190518101906100a79190610188565b949350505050565b634e487b7160e01b5f52604160045260245ffd5b5f5f5f606084860312156100d5575f5ffd5b8335925060208401359150604084013567ffffffffffffffff8111156100f9575f5ffd5b8401601f81018613610109575f5ffd5b803567ffffffffffffffff811115610123576101236100af565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715610152576101526100af565b604052818152828201602001881015610169575f5ffd5b816020840160208301375f602083830101528093505050509250925092565b5f60208284031215610198575f5ffd5b815173ffffffffffffffffffffffffffffffffffffffff811681146101bb575f5ffd5b939250505056fea26469706673582212207514cd734dc50dddf422f29479e29624f942ee50c9bfa31c2523ac179139a3fa64736f6c634300081b0033";

  
      type MockComputeProviderConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: MockComputeProviderConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class MockComputeProvider__factory extends ContractFactory {
    
      constructor(...args: MockComputeProviderConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<MockComputeProvider & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): MockComputeProvider__factory {
      return super.connect(runner) as MockComputeProvider__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockComputeProviderInterface {
      return new Interface(_abi) as MockComputeProviderInterface;
    }
    
    override attach(address: string | Addressable): MockComputeProvider {
      return super.attach(address) as MockComputeProvider;
    }
  static connect(address: string, runner?: ContractRunner | null): MockComputeProvider {
      return new Contract(address, _abi, runner) as unknown as MockComputeProvider;
    }
  }

  
  