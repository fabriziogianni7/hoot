/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../../../../../common.js"
  import type { MockCiphernodeRegistry, MockCiphernodeRegistryInterface } from "../../../../../../@enclave-e3/contracts/contracts/test/MockCiphernodeRegistry.sol/MockCiphernodeRegistry.js";

  const _abi = [
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "node",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "index",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "numNodes",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "size",
        "type": "uint256"
      }
    ],
    "name": "CiphernodeAdded",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "node",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "index",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "numNodes",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "size",
        "type": "uint256"
      }
    ],
    "name": "CiphernodeRemoved",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "uint256",
        "name": "e3Id",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "bytes",
        "name": "publicKey",
        "type": "bytes"
      }
    ],
    "name": "CommitteePublished",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "uint256",
        "name": "e3Id",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "address",
        "name": "filter",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint32[2]",
        "name": "threshold",
        "type": "uint32[2]"
      }
    ],
    "name": "CommitteeRequested",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "enclave",
        "type": "address"
      }
    ],
    "name": "EnclaveSet",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "e3Id",
        "type": "uint256"
      }
    ],
    "name": "committeePublicKey",
    "outputs": [
      {
        "internalType": "bytes32",
        "name": "",
        "type": "bytes32"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "isCiphernodeEligible",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      },
      {
        "internalType": "bytes",
        "name": "",
        "type": "bytes"
      },
      {
        "internalType": "bytes",
        "name": "",
        "type": "bytes"
      }
    ],
    "name": "publishCommittee",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      },
      {
        "internalType": "address",
        "name": "filter",
        "type": "address"
      },
      {
        "internalType": "uint32[2]",
        "name": "",
        "type": "uint32[2]"
      }
    ],
    "name": "requestCommittee",
    "outputs": [
      {
        "internalType": "bool",
        "name": "success",
        "type": "bool"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  }
] as const;

  const _bytecode = "0x6080604052348015600e575f5ffd5b506102b88061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061004a575f3560e01c80632e7b716d1461004e5780639ccb58d514610076578063d9bbec9514610089578063e82f3b70146100a0575b5f5ffd5b61006161005c366004610154565b505f90565b60405190151581526020015b60405180910390f35b61006161008436600461016d565b6100c1565b61009e6100973660046101f2565b5050505050565b005b6100b36100ae36600461026b565b6100f3565b60405190815260200161006d565b5f60011973ffffffffffffffffffffffffffffffffffffffff8416016100e857505f6100ec565b5060015b9392505050565b5f5f19820361010357505f919050565b604080516020810184905201604051602081830303815290604052805190602001209050919050565b919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461012c575f5ffd5b5f60208284031215610164575f5ffd5b6100ec82610131565b5f5f5f6080848603121561017f575f5ffd5b8335925061018f60208501610131565b9150846080850111156101a0575f5ffd5b6040840190509250925092565b5f5f83601f8401126101bd575f5ffd5b50813567ffffffffffffffff8111156101d4575f5ffd5b6020830191508360208285010111156101eb575f5ffd5b9250929050565b5f5f5f5f5f60608688031215610206575f5ffd5b85359450602086013567ffffffffffffffff811115610223575f5ffd5b61022f888289016101ad565b909550935050604086013567ffffffffffffffff81111561024e575f5ffd5b61025a888289016101ad565b969995985093965092949392505050565b5f6020828403121561027b575f5ffd5b503591905056fea26469706673582212205e3454187a55d4657a140bd50b3fbd539ad21fb8ab191dd0fd61f3e6707078dd64736f6c634300081b0033";

  
      type MockCiphernodeRegistryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: MockCiphernodeRegistryConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class MockCiphernodeRegistry__factory extends ContractFactory {
    
      constructor(...args: MockCiphernodeRegistryConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<MockCiphernodeRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): MockCiphernodeRegistry__factory {
      return super.connect(runner) as MockCiphernodeRegistry__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockCiphernodeRegistryInterface {
      return new Interface(_abi) as MockCiphernodeRegistryInterface;
    }
    
    override attach(address: string | Addressable): MockCiphernodeRegistry {
      return super.attach(address) as MockCiphernodeRegistry;
    }
  static connect(address: string, runner?: ContractRunner | null): MockCiphernodeRegistry {
      return new Contract(address, _abi, runner) as unknown as MockCiphernodeRegistry;
    }
  }

  
  