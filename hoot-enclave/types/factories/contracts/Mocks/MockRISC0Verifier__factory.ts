/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../../common.js"
  import type { MockRISC0Verifier, MockRISC0VerifierInterface } from "../../../contracts/Mocks/MockRISC0Verifier.js";

  const _abi = [
  {
    "inputs": [
      {
        "internalType": "bytes",
        "name": "seal",
        "type": "bytes"
      },
      {
        "internalType": "bytes32",
        "name": "imageId",
        "type": "bytes32"
      },
      {
        "internalType": "bytes32",
        "name": "journalDigest",
        "type": "bytes32"
      }
    ],
    "name": "verify",
    "outputs": [],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "components": [
          {
            "internalType": "bytes",
            "name": "seal",
            "type": "bytes"
          },
          {
            "internalType": "bytes32",
            "name": "claimDigest",
            "type": "bytes32"
          }
        ],
        "internalType": "struct Receipt",
        "name": "receipt",
        "type": "tuple"
      }
    ],
    "name": "verifyIntegrity",
    "outputs": [],
    "stateMutability": "view",
    "type": "function"
  }
] as const;

  const _bytecode = "0x6080604052348015600e575f5ffd5b5061014d8061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c80631599ead514610038578063ab750e751461004b575b5f5ffd5b61004961004636600461005f565b50565b005b61004961005936600461009d565b50505050565b5f6020828403121561006f575f5ffd5b813567ffffffffffffffff811115610085575f5ffd5b820160408185031215610096575f5ffd5b9392505050565b5f5f5f5f606085870312156100b0575f5ffd5b843567ffffffffffffffff8111156100c6575f5ffd5b8501601f810187136100d6575f5ffd5b803567ffffffffffffffff8111156100ec575f5ffd5b8760208284010111156100fd575f5ffd5b60209182019890975090860135956040013594509250505056fea26469706673582212201556b14aeb483333b96bad36421927bd66a40f8ab8e85c810aa971b5a03ea17a64736f6c634300081b0033";

  
      type MockRISC0VerifierConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: MockRISC0VerifierConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class MockRISC0Verifier__factory extends ContractFactory {
    
      constructor(...args: MockRISC0VerifierConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<MockRISC0Verifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): MockRISC0Verifier__factory {
      return super.connect(runner) as MockRISC0Verifier__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockRISC0VerifierInterface {
      return new Interface(_abi) as MockRISC0VerifierInterface;
    }
    
    override attach(address: string | Addressable): MockRISC0Verifier {
      return super.attach(address) as MockRISC0Verifier;
    }
  static connect(address: string, runner?: ContractRunner | null): MockRISC0Verifier {
      return new Contract(address, _abi, runner) as unknown as MockRISC0Verifier;
    }
  }

  
  