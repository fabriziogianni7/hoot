/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { InputValidator, InputValidatorInterface } from "../../contracts/InputValidator.js";

  const _abi = [
  {
    "inputs": [],
    "name": "EmptyInputData",
    "type": "error"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "sender",
        "type": "address"
      },
      {
        "internalType": "bytes",
        "name": "data",
        "type": "bytes"
      }
    ],
    "name": "validate",
    "outputs": [
      {
        "internalType": "bytes",
        "name": "input",
        "type": "bytes"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  }
] as const;

  const _bytecode = "0x6080604052348015600e575f5ffd5b506101dc8061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063caf927851461002d575b5f5ffd5b61004061003b366004610093565b610056565b60405161004d9190610171565b60405180910390f35b606081515f0361007957604051639689d58160e01b815260040160405180910390fd5b50919050565b634e487b7160e01b5f52604160045260245ffd5b5f5f604083850312156100a4575f5ffd5b823573ffffffffffffffffffffffffffffffffffffffff811681146100c7575f5ffd5b9150602083013567ffffffffffffffff8111156100e2575f5ffd5b8301601f810185136100f2575f5ffd5b803567ffffffffffffffff81111561010c5761010c61007f565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561013b5761013b61007f565b604052818152828201602001871015610152575f5ffd5b816020840160208301375f602083830101528093505050509250929050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f8301168401019150509291505056fea26469706673582212204d956a5d7098ace873ce8d432742be9cf36799fa347ca027e69c3b84e3ad1c8164736f6c634300081b0033";

  
      type InputValidatorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: InputValidatorConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class InputValidator__factory extends ContractFactory {
    
      constructor(...args: InputValidatorConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<InputValidator & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): InputValidator__factory {
      return super.connect(runner) as InputValidator__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): InputValidatorInterface {
      return new Interface(_abi) as InputValidatorInterface;
    }
    
    override attach(address: string | Addressable): InputValidator {
      return super.attach(address) as InputValidator;
    }
  static connect(address: string, runner?: ContractRunner | null): InputValidator {
      return new Contract(address, _abi, runner) as unknown as InputValidator;
    }
  }

  
  