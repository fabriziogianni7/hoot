/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { ImageID, ImageIDInterface } from "../../contracts/ImageID.js";

  const _abi = [
  {
    "inputs": [],
    "name": "PROGRAM_ID",
    "outputs": [
      {
        "internalType": "bytes32",
        "name": "",
        "type": "bytes32"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  }
] as const;

  const _bytecode = "0x60a46032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106032575f3560e01c80632f021764146036575b5f5ffd5b605c7faf928ebf39fec4696c3f41f473a1a9473b67d723c6373149c6ab99ba4c1a76ef81565b60405190815260200160405180910390f3fea264697066735822122019c3c8f6a3bd247130711e90b7f4218a47bc5f4c166276cf5d73f46025f0b8e164736f6c634300081b0033";

  
      type ImageIDConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: ImageIDConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class ImageID__factory extends ContractFactory {
    
      constructor(...args: ImageIDConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<ImageID & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): ImageID__factory {
      return super.connect(runner) as ImageID__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): ImageIDInterface {
      return new Interface(_abi) as ImageIDInterface;
    }
    
    override attach(address: string | Addressable): ImageID {
      return super.attach(address) as ImageID;
    }
  static connect(address: string, runner?: ContractRunner | null): ImageID {
      return new Contract(address, _abi, runner) as unknown as ImageID;
    }
  }

  
  