/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */


import { ethers } from 'ethers'
import { DeployContractOptions, FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from "./index.js";

declare module "@nomicfoundation/hardhat-ethers/types" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
  getContractFactory(name: 'Enclave', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.Enclave__factory>
getContractFactory(name: 'CiphernodeRegistryOwnable', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.CiphernodeRegistryOwnable__factory>
getContractFactory(name: 'NaiveRegistryFilter', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.NaiveRegistryFilter__factory>
getContractFactory(name: 'MockCiphernodeRegistry', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockCiphernodeRegistry__factory>
getContractFactory(name: 'MockCiphernodeRegistryEmptyKey', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockCiphernodeRegistryEmptyKey__factory>
getContractFactory(name: 'MockComputeProvider', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockComputeProvider__factory>
getContractFactory(name: 'MockDecryptionVerifier', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockDecryptionVerifier__factory>
getContractFactory(name: 'MockE3Program', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockE3Program__factory>
getContractFactory(name: 'MockInputValidator', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockInputValidator__factory>
getContractFactory(name: 'IRegistry', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IRegistry__factory>
getContractFactory(name: 'MockNaiveRegistryFilter', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockNaiveRegistryFilter__factory>
getContractFactory(name: 'ImageID', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ImageID__factory>
getContractFactory(name: 'InputValidator', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.InputValidator__factory>
getContractFactory(name: 'MockRISC0Verifier', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockRISC0Verifier__factory>
getContractFactory(name: 'MyProgram', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MyProgram__factory>
getContractFactory(name: 'PoseidonT3', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.PoseidonT3__factory>

  getContractAt(name: 'Enclave', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.Enclave>
getContractAt(name: 'CiphernodeRegistryOwnable', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.CiphernodeRegistryOwnable>
getContractAt(name: 'NaiveRegistryFilter', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.NaiveRegistryFilter>
getContractAt(name: 'MockCiphernodeRegistry', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockCiphernodeRegistry>
getContractAt(name: 'MockCiphernodeRegistryEmptyKey', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockCiphernodeRegistryEmptyKey>
getContractAt(name: 'MockComputeProvider', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockComputeProvider>
getContractAt(name: 'MockDecryptionVerifier', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockDecryptionVerifier>
getContractAt(name: 'MockE3Program', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockE3Program>
getContractAt(name: 'MockInputValidator', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockInputValidator>
getContractAt(name: 'IRegistry', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IRegistry>
getContractAt(name: 'MockNaiveRegistryFilter', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockNaiveRegistryFilter>
getContractAt(name: 'ImageID', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ImageID>
getContractAt(name: 'InputValidator', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.InputValidator>
getContractAt(name: 'MockRISC0Verifier', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockRISC0Verifier>
getContractAt(name: 'MyProgram', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MyProgram>
getContractAt(name: 'PoseidonT3', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.PoseidonT3>

  deployContract(name: 'Enclave', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Enclave>
deployContract(name: 'CiphernodeRegistryOwnable', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CiphernodeRegistryOwnable>
deployContract(name: 'NaiveRegistryFilter', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.NaiveRegistryFilter>
deployContract(name: 'MockCiphernodeRegistry', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockCiphernodeRegistry>
deployContract(name: 'MockCiphernodeRegistryEmptyKey', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockCiphernodeRegistryEmptyKey>
deployContract(name: 'MockComputeProvider', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockComputeProvider>
deployContract(name: 'MockDecryptionVerifier', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockDecryptionVerifier>
deployContract(name: 'MockE3Program', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockE3Program>
deployContract(name: 'MockInputValidator', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockInputValidator>
deployContract(name: 'IRegistry', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRegistry>
deployContract(name: 'MockNaiveRegistryFilter', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockNaiveRegistryFilter>
deployContract(name: 'ImageID', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ImageID>
deployContract(name: 'InputValidator', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.InputValidator>
deployContract(name: 'MockRISC0Verifier', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockRISC0Verifier>
deployContract(name: 'MyProgram', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MyProgram>
deployContract(name: 'PoseidonT3', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.PoseidonT3>

  deployContract(name: 'Enclave', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Enclave>
deployContract(name: 'CiphernodeRegistryOwnable', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CiphernodeRegistryOwnable>
deployContract(name: 'NaiveRegistryFilter', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.NaiveRegistryFilter>
deployContract(name: 'MockCiphernodeRegistry', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockCiphernodeRegistry>
deployContract(name: 'MockCiphernodeRegistryEmptyKey', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockCiphernodeRegistryEmptyKey>
deployContract(name: 'MockComputeProvider', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockComputeProvider>
deployContract(name: 'MockDecryptionVerifier', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockDecryptionVerifier>
deployContract(name: 'MockE3Program', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockE3Program>
deployContract(name: 'MockInputValidator', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockInputValidator>
deployContract(name: 'IRegistry', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IRegistry>
deployContract(name: 'MockNaiveRegistryFilter', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockNaiveRegistryFilter>
deployContract(name: 'ImageID', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ImageID>
deployContract(name: 'InputValidator', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.InputValidator>
deployContract(name: 'MockRISC0Verifier', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockRISC0Verifier>
deployContract(name: 'MyProgram', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MyProgram>
deployContract(name: 'PoseidonT3', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.PoseidonT3>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
  