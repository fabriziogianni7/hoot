/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface MyProgramInterface extends Interface {
    getFunction(nameOrSignature: "ENCRYPTION_SCHEME_ID" | "authorizedContracts" | "enclave" | "imageId" | "inputValidator" | "owner" | "paramsHashes" | "renounceOwnership" | "transferOwnership" | "validate" | "verifier" | "verify"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

    encodeFunctionData(functionFragment: 'ENCRYPTION_SCHEME_ID', values?: undefined): string;
encodeFunctionData(functionFragment: 'authorizedContracts', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'enclave', values?: undefined): string;
encodeFunctionData(functionFragment: 'imageId', values?: undefined): string;
encodeFunctionData(functionFragment: 'inputValidator', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'paramsHashes', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'validate', values: [BigNumberish, BigNumberish, BytesLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'verifier', values?: undefined): string;
encodeFunctionData(functionFragment: 'verify', values: [BigNumberish, BytesLike, BytesLike]): string;

    decodeFunctionResult(functionFragment: 'ENCRYPTION_SCHEME_ID', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'authorizedContracts', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'enclave', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'imageId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'inputValidator', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'paramsHashes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'validate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verifier', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result;
  }

  
    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MyProgram extends BaseContract {
    
    connect(runner?: ContractRunner | null): MyProgram;
    waitForDeployment(): Promise<this>;

    interface: MyProgramInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    ENCRYPTION_SCHEME_ID: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    authorizedContracts: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    enclave: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    imageId: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    inputValidator: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    paramsHashes: TypedContractMethod<
      [e3Id: BigNumberish, ],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    validate: TypedContractMethod<
      [e3Id: BigNumberish, arg1: BigNumberish, e3ProgramParams: BytesLike, arg3: BytesLike, ],
      [[string, string]],
      'nonpayable'
    >
    

    
    verifier: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    verify: TypedContractMethod<
      [e3Id: BigNumberish, ciphertextOutputHash: BytesLike, proof: BytesLike, ],
      [boolean],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'ENCRYPTION_SCHEME_ID'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'authorizedContracts'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'enclave'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'imageId'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'inputValidator'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'paramsHashes'): TypedContractMethod<
      [e3Id: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'validate'): TypedContractMethod<
      [e3Id: BigNumberish, arg1: BigNumberish, e3ProgramParams: BytesLike, arg3: BytesLike, ],
      [[string, string]],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'verifier'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'verify'): TypedContractMethod<
      [e3Id: BigNumberish, ciphertextOutputHash: BytesLike, proof: BytesLike, ],
      [boolean],
      'view'
    >;

    getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;

    filters: {
      
      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    
    };
  }