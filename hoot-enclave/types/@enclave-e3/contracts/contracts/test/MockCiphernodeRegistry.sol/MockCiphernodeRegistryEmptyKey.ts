/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../../../../common.js"
  

  export interface MockCiphernodeRegistryEmptyKeyInterface extends Interface {
    getFunction(nameOrSignature: "committeePublicKey" | "isCiphernodeEligible" | "publishCommittee" | "requestCommittee"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CiphernodeAdded" | "CiphernodeRemoved" | "CommitteePublished" | "CommitteeRequested" | "EnclaveSet"): EventFragment;

    encodeFunctionData(functionFragment: 'committeePublicKey', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'isCiphernodeEligible', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'publishCommittee', values: [BigNumberish, BytesLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'requestCommittee', values: [BigNumberish, AddressLike, [BigNumberish, BigNumberish]]): string;

    decodeFunctionResult(functionFragment: 'committeePublicKey', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isCiphernodeEligible', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'publishCommittee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestCommittee', data: BytesLike): Result;
  }

  
    export namespace CiphernodeAddedEvent {
      export type InputTuple = [node: AddressLike, index: BigNumberish, numNodes: BigNumberish, size: BigNumberish];
      export type OutputTuple = [node: string, index: bigint, numNodes: bigint, size: bigint];
      export interface OutputObject {node: string, index: bigint, numNodes: bigint, size: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CiphernodeRemovedEvent {
      export type InputTuple = [node: AddressLike, index: BigNumberish, numNodes: BigNumberish, size: BigNumberish];
      export type OutputTuple = [node: string, index: bigint, numNodes: bigint, size: bigint];
      export interface OutputObject {node: string, index: bigint, numNodes: bigint, size: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CommitteePublishedEvent {
      export type InputTuple = [e3Id: BigNumberish, publicKey: BytesLike];
      export type OutputTuple = [e3Id: bigint, publicKey: string];
      export interface OutputObject {e3Id: bigint, publicKey: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CommitteeRequestedEvent {
      export type InputTuple = [e3Id: BigNumberish, filter: AddressLike, threshold: [BigNumberish, BigNumberish]];
      export type OutputTuple = [e3Id: bigint, filter: string, threshold: [bigint, bigint]];
      export interface OutputObject {e3Id: bigint, filter: string, threshold: [bigint, bigint] };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EnclaveSetEvent {
      export type InputTuple = [enclave: AddressLike];
      export type OutputTuple = [enclave: string];
      export interface OutputObject {enclave: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MockCiphernodeRegistryEmptyKey extends BaseContract {
    
    connect(runner?: ContractRunner | null): MockCiphernodeRegistryEmptyKey;
    waitForDeployment(): Promise<this>;

    interface: MockCiphernodeRegistryEmptyKeyInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    committeePublicKey: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    isCiphernodeEligible: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    publishCommittee: TypedContractMethod<
      [arg0: BigNumberish, arg1: BytesLike, arg2: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    requestCommittee: TypedContractMethod<
      [arg0: BigNumberish, filter: AddressLike, arg2: [BigNumberish, BigNumberish], ],
      [boolean],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'committeePublicKey'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'isCiphernodeEligible'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'publishCommittee'): TypedContractMethod<
      [arg0: BigNumberish, arg1: BytesLike, arg2: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'requestCommittee'): TypedContractMethod<
      [arg0: BigNumberish, filter: AddressLike, arg2: [BigNumberish, BigNumberish], ],
      [boolean],
      'view'
    >;

    getEvent(key: 'CiphernodeAdded'): TypedContractEvent<CiphernodeAddedEvent.InputTuple, CiphernodeAddedEvent.OutputTuple, CiphernodeAddedEvent.OutputObject>;
getEvent(key: 'CiphernodeRemoved'): TypedContractEvent<CiphernodeRemovedEvent.InputTuple, CiphernodeRemovedEvent.OutputTuple, CiphernodeRemovedEvent.OutputObject>;
getEvent(key: 'CommitteePublished'): TypedContractEvent<CommitteePublishedEvent.InputTuple, CommitteePublishedEvent.OutputTuple, CommitteePublishedEvent.OutputObject>;
getEvent(key: 'CommitteeRequested'): TypedContractEvent<CommitteeRequestedEvent.InputTuple, CommitteeRequestedEvent.OutputTuple, CommitteeRequestedEvent.OutputObject>;
getEvent(key: 'EnclaveSet'): TypedContractEvent<EnclaveSetEvent.InputTuple, EnclaveSetEvent.OutputTuple, EnclaveSetEvent.OutputObject>;

    filters: {
      
      'CiphernodeAdded(address,uint256,uint256,uint256)': TypedContractEvent<CiphernodeAddedEvent.InputTuple, CiphernodeAddedEvent.OutputTuple, CiphernodeAddedEvent.OutputObject>;
      CiphernodeAdded: TypedContractEvent<CiphernodeAddedEvent.InputTuple, CiphernodeAddedEvent.OutputTuple, CiphernodeAddedEvent.OutputObject>;
    

      'CiphernodeRemoved(address,uint256,uint256,uint256)': TypedContractEvent<CiphernodeRemovedEvent.InputTuple, CiphernodeRemovedEvent.OutputTuple, CiphernodeRemovedEvent.OutputObject>;
      CiphernodeRemoved: TypedContractEvent<CiphernodeRemovedEvent.InputTuple, CiphernodeRemovedEvent.OutputTuple, CiphernodeRemovedEvent.OutputObject>;
    

      'CommitteePublished(uint256,bytes)': TypedContractEvent<CommitteePublishedEvent.InputTuple, CommitteePublishedEvent.OutputTuple, CommitteePublishedEvent.OutputObject>;
      CommitteePublished: TypedContractEvent<CommitteePublishedEvent.InputTuple, CommitteePublishedEvent.OutputTuple, CommitteePublishedEvent.OutputObject>;
    

      'CommitteeRequested(uint256,address,uint32[2])': TypedContractEvent<CommitteeRequestedEvent.InputTuple, CommitteeRequestedEvent.OutputTuple, CommitteeRequestedEvent.OutputObject>;
      CommitteeRequested: TypedContractEvent<CommitteeRequestedEvent.InputTuple, CommitteeRequestedEvent.OutputTuple, CommitteeRequestedEvent.OutputObject>;
    

      'EnclaveSet(address)': TypedContractEvent<EnclaveSetEvent.InputTuple, EnclaveSetEvent.OutputTuple, EnclaveSetEvent.OutputObject>;
      EnclaveSet: TypedContractEvent<EnclaveSetEvent.InputTuple, EnclaveSetEvent.OutputTuple, EnclaveSetEvent.OutputObject>;
    
    };
  }