/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../../../common.js"
  
export declare namespace NaiveRegistryFilter {
      
    export type CommitteeStruct = {nodes: AddressLike[], threshold: [BigNumberish, BigNumberish], publicKey: BytesLike}

    export type CommitteeStructOutput = [nodes: string[], threshold: [bigint, bigint], publicKey: string] & {nodes: string[], threshold: [bigint, bigint], publicKey: string }
  
    }

  export interface NaiveRegistryFilterInterface extends Interface {
    getFunction(nameOrSignature: "committees" | "getCommittee" | "initialize" | "owner" | "publishCommittee" | "registry" | "renounceOwnership" | "requestCommittee" | "setRegistry" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Initialized" | "OwnershipTransferred"): EventFragment;

    encodeFunctionData(functionFragment: 'committees', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getCommittee', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'initialize', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'publishCommittee', values: [BigNumberish, AddressLike[], BytesLike]): string;
encodeFunctionData(functionFragment: 'registry', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'requestCommittee', values: [BigNumberish, [BigNumberish, BigNumberish]]): string;
encodeFunctionData(functionFragment: 'setRegistry', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'committees', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCommittee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'publishCommittee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'registry', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestCommittee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setRegistry', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace InitializedEvent {
      export type InputTuple = [version: BigNumberish];
      export type OutputTuple = [version: bigint];
      export interface OutputObject {version: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface NaiveRegistryFilter extends BaseContract {
    
    connect(runner?: ContractRunner | null): NaiveRegistryFilter;
    waitForDeployment(): Promise<this>;

    interface: NaiveRegistryFilterInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    committees: TypedContractMethod<
      [e3: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getCommittee: TypedContractMethod<
      [e3Id: BigNumberish, ],
      [NaiveRegistryFilter.CommitteeStructOutput],
      'view'
    >
    

    
    initialize: TypedContractMethod<
      [_owner: AddressLike, _registry: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    publishCommittee: TypedContractMethod<
      [e3Id: BigNumberish, nodes: AddressLike[], publicKey: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    registry: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    requestCommittee: TypedContractMethod<
      [e3Id: BigNumberish, threshold: [BigNumberish, BigNumberish], ],
      [boolean],
      'nonpayable'
    >
    

    
    setRegistry: TypedContractMethod<
      [_registry: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'committees'): TypedContractMethod<
      [e3: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getCommittee'): TypedContractMethod<
      [e3Id: BigNumberish, ],
      [NaiveRegistryFilter.CommitteeStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'initialize'): TypedContractMethod<
      [_owner: AddressLike, _registry: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'publishCommittee'): TypedContractMethod<
      [e3Id: BigNumberish, nodes: AddressLike[], publicKey: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'registry'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'requestCommittee'): TypedContractMethod<
      [e3Id: BigNumberish, threshold: [BigNumberish, BigNumberish], ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setRegistry'): TypedContractMethod<
      [_registry: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'Initialized'): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;

    filters: {
      
      'Initialized(uint64)': TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
      Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    
    };
  }