/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../../../common.js"
  

  export interface CiphernodeRegistryOwnableInterface extends Interface {
    getFunction(nameOrSignature: "addCiphernode" | "ciphernodes" | "committeePublicKey" | "enclave" | "getFilter" | "initialize" | "isCiphernodeEligible" | "isEnabled" | "numCiphernodes" | "owner" | "publicKeyHashes" | "publishCommittee" | "registryFilters" | "removeCiphernode" | "renounceOwnership" | "requestCommittee" | "root" | "rootAt" | "roots" | "setEnclave" | "transferOwnership" | "treeSize"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CiphernodeAdded" | "CiphernodeRemoved" | "CommitteePublished" | "CommitteeRequested" | "EnclaveSet" | "Initialized" | "OwnershipTransferred"): EventFragment;

    encodeFunctionData(functionFragment: 'addCiphernode', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'ciphernodes', values?: undefined): string;
encodeFunctionData(functionFragment: 'committeePublicKey', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'enclave', values?: undefined): string;
encodeFunctionData(functionFragment: 'getFilter', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'initialize', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'isCiphernodeEligible', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'isEnabled', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'numCiphernodes', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'publicKeyHashes', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'publishCommittee', values: [BigNumberish, BytesLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'registryFilters', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'removeCiphernode', values: [AddressLike, BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'requestCommittee', values: [BigNumberish, AddressLike, [BigNumberish, BigNumberish]]): string;
encodeFunctionData(functionFragment: 'root', values?: undefined): string;
encodeFunctionData(functionFragment: 'rootAt', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'roots', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setEnclave', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'treeSize', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'addCiphernode', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ciphernodes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'committeePublicKey', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'enclave', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getFilter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isCiphernodeEligible', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isEnabled', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'numCiphernodes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'publicKeyHashes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'publishCommittee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'registryFilters', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeCiphernode', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestCommittee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'root', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rootAt', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'roots', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setEnclave', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'treeSize', data: BytesLike): Result;
  }

  
    export namespace CiphernodeAddedEvent {
      export type InputTuple = [node: AddressLike, index: BigNumberish, numNodes: BigNumberish, size: BigNumberish];
      export type OutputTuple = [node: string, index: bigint, numNodes: bigint, size: bigint];
      export interface OutputObject {node: string, index: bigint, numNodes: bigint, size: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CiphernodeRemovedEvent {
      export type InputTuple = [node: AddressLike, index: BigNumberish, numNodes: BigNumberish, size: BigNumberish];
      export type OutputTuple = [node: string, index: bigint, numNodes: bigint, size: bigint];
      export interface OutputObject {node: string, index: bigint, numNodes: bigint, size: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CommitteePublishedEvent {
      export type InputTuple = [e3Id: BigNumberish, publicKey: BytesLike];
      export type OutputTuple = [e3Id: bigint, publicKey: string];
      export interface OutputObject {e3Id: bigint, publicKey: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CommitteeRequestedEvent {
      export type InputTuple = [e3Id: BigNumberish, filter: AddressLike, threshold: [BigNumberish, BigNumberish]];
      export type OutputTuple = [e3Id: bigint, filter: string, threshold: [bigint, bigint]];
      export interface OutputObject {e3Id: bigint, filter: string, threshold: [bigint, bigint] };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EnclaveSetEvent {
      export type InputTuple = [enclave: AddressLike];
      export type OutputTuple = [enclave: string];
      export interface OutputObject {enclave: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InitializedEvent {
      export type InputTuple = [version: BigNumberish];
      export type OutputTuple = [version: bigint];
      export interface OutputObject {version: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface CiphernodeRegistryOwnable extends BaseContract {
    
    connect(runner?: ContractRunner | null): CiphernodeRegistryOwnable;
    waitForDeployment(): Promise<this>;

    interface: CiphernodeRegistryOwnableInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addCiphernode: TypedContractMethod<
      [node: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    ciphernodes: TypedContractMethod<
      [],
      [[bigint, bigint] & {size: bigint, depth: bigint }],
      'view'
    >
    

    
    committeePublicKey: TypedContractMethod<
      [e3Id: BigNumberish, ],
      [string],
      'view'
    >
    

    
    enclave: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    getFilter: TypedContractMethod<
      [e3Id: BigNumberish, ],
      [string],
      'view'
    >
    

    
    initialize: TypedContractMethod<
      [_owner: AddressLike, _enclave: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    isCiphernodeEligible: TypedContractMethod<
      [node: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isEnabled: TypedContractMethod<
      [node: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    numCiphernodes: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    publicKeyHashes: TypedContractMethod<
      [e3Id: BigNumberish, ],
      [string],
      'view'
    >
    

    
    publishCommittee: TypedContractMethod<
      [e3Id: BigNumberish, arg1: BytesLike, publicKey: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    registryFilters: TypedContractMethod<
      [e3Id: BigNumberish, ],
      [string],
      'view'
    >
    

    
    removeCiphernode: TypedContractMethod<
      [node: AddressLike, siblingNodes: BigNumberish[], ],
      [void],
      'nonpayable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    requestCommittee: TypedContractMethod<
      [e3Id: BigNumberish, filter: AddressLike, threshold: [BigNumberish, BigNumberish], ],
      [boolean],
      'nonpayable'
    >
    

    
    root: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    rootAt: TypedContractMethod<
      [e3Id: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    roots: TypedContractMethod<
      [e3Id: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    setEnclave: TypedContractMethod<
      [_enclave: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    treeSize: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addCiphernode'): TypedContractMethod<
      [node: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'ciphernodes'): TypedContractMethod<
      [],
      [[bigint, bigint] & {size: bigint, depth: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'committeePublicKey'): TypedContractMethod<
      [e3Id: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'enclave'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getFilter'): TypedContractMethod<
      [e3Id: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'initialize'): TypedContractMethod<
      [_owner: AddressLike, _enclave: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'isCiphernodeEligible'): TypedContractMethod<
      [node: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isEnabled'): TypedContractMethod<
      [node: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'numCiphernodes'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'publicKeyHashes'): TypedContractMethod<
      [e3Id: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'publishCommittee'): TypedContractMethod<
      [e3Id: BigNumberish, arg1: BytesLike, publicKey: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'registryFilters'): TypedContractMethod<
      [e3Id: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'removeCiphernode'): TypedContractMethod<
      [node: AddressLike, siblingNodes: BigNumberish[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'requestCommittee'): TypedContractMethod<
      [e3Id: BigNumberish, filter: AddressLike, threshold: [BigNumberish, BigNumberish], ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'root'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'rootAt'): TypedContractMethod<
      [e3Id: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'roots'): TypedContractMethod<
      [e3Id: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'setEnclave'): TypedContractMethod<
      [_enclave: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'treeSize'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;

    getEvent(key: 'CiphernodeAdded'): TypedContractEvent<CiphernodeAddedEvent.InputTuple, CiphernodeAddedEvent.OutputTuple, CiphernodeAddedEvent.OutputObject>;
getEvent(key: 'CiphernodeRemoved'): TypedContractEvent<CiphernodeRemovedEvent.InputTuple, CiphernodeRemovedEvent.OutputTuple, CiphernodeRemovedEvent.OutputObject>;
getEvent(key: 'CommitteePublished'): TypedContractEvent<CommitteePublishedEvent.InputTuple, CommitteePublishedEvent.OutputTuple, CommitteePublishedEvent.OutputObject>;
getEvent(key: 'CommitteeRequested'): TypedContractEvent<CommitteeRequestedEvent.InputTuple, CommitteeRequestedEvent.OutputTuple, CommitteeRequestedEvent.OutputObject>;
getEvent(key: 'EnclaveSet'): TypedContractEvent<EnclaveSetEvent.InputTuple, EnclaveSetEvent.OutputTuple, EnclaveSetEvent.OutputObject>;
getEvent(key: 'Initialized'): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;

    filters: {
      
      'CiphernodeAdded(address,uint256,uint256,uint256)': TypedContractEvent<CiphernodeAddedEvent.InputTuple, CiphernodeAddedEvent.OutputTuple, CiphernodeAddedEvent.OutputObject>;
      CiphernodeAdded: TypedContractEvent<CiphernodeAddedEvent.InputTuple, CiphernodeAddedEvent.OutputTuple, CiphernodeAddedEvent.OutputObject>;
    

      'CiphernodeRemoved(address,uint256,uint256,uint256)': TypedContractEvent<CiphernodeRemovedEvent.InputTuple, CiphernodeRemovedEvent.OutputTuple, CiphernodeRemovedEvent.OutputObject>;
      CiphernodeRemoved: TypedContractEvent<CiphernodeRemovedEvent.InputTuple, CiphernodeRemovedEvent.OutputTuple, CiphernodeRemovedEvent.OutputObject>;
    

      'CommitteePublished(uint256,bytes)': TypedContractEvent<CommitteePublishedEvent.InputTuple, CommitteePublishedEvent.OutputTuple, CommitteePublishedEvent.OutputObject>;
      CommitteePublished: TypedContractEvent<CommitteePublishedEvent.InputTuple, CommitteePublishedEvent.OutputTuple, CommitteePublishedEvent.OutputObject>;
    

      'CommitteeRequested(uint256,address,uint32[2])': TypedContractEvent<CommitteeRequestedEvent.InputTuple, CommitteeRequestedEvent.OutputTuple, CommitteeRequestedEvent.OutputObject>;
      CommitteeRequested: TypedContractEvent<CommitteeRequestedEvent.InputTuple, CommitteeRequestedEvent.OutputTuple, CommitteeRequestedEvent.OutputObject>;
    

      'EnclaveSet(address)': TypedContractEvent<EnclaveSetEvent.InputTuple, EnclaveSetEvent.OutputTuple, EnclaveSetEvent.OutputObject>;
      EnclaveSet: TypedContractEvent<EnclaveSetEvent.InputTuple, EnclaveSetEvent.OutputTuple, EnclaveSetEvent.OutputObject>;
    

      'Initialized(uint64)': TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
      Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    
    };
  }