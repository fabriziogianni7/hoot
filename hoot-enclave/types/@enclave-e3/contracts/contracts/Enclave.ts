/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../../common.js"
  
    export type E3Struct = {seed: BigNumberish, threshold: [BigNumberish, BigNumberish], requestBlock: BigNumberish, startWindow: [BigNumberish, BigNumberish], duration: BigNumberish, expiration: BigNumberish, encryptionSchemeId: BytesLike, e3Program: AddressLike, e3ProgramParams: BytesLike, inputValidator: AddressLike, decryptionVerifier: AddressLike, committeePublicKey: BytesLike, ciphertextOutput: BytesLike, plaintextOutput: BytesLike}

    export type E3StructOutput = [seed: bigint, threshold: [bigint, bigint], requestBlock: bigint, startWindow: [bigint, bigint], duration: bigint, expiration: bigint, encryptionSchemeId: string, e3Program: string, e3ProgramParams: string, inputValidator: string, decryptionVerifier: string, committeePublicKey: string, ciphertextOutput: string, plaintextOutput: string] & {seed: bigint, threshold: [bigint, bigint], requestBlock: bigint, startWindow: [bigint, bigint], duration: bigint, expiration: bigint, encryptionSchemeId: string, e3Program: string, e3ProgramParams: string, inputValidator: string, decryptionVerifier: string, committeePublicKey: string, ciphertextOutput: string, plaintextOutput: string }
  

export declare namespace IEnclave {
      
    export type E3RequestParamsStruct = {filter: AddressLike, threshold: [BigNumberish, BigNumberish], startWindow: [BigNumberish, BigNumberish], duration: BigNumberish, e3Program: AddressLike, e3ProgramParams: BytesLike, computeProviderParams: BytesLike}

    export type E3RequestParamsStructOutput = [filter: string, threshold: [bigint, bigint], startWindow: [bigint, bigint], duration: bigint, e3Program: string, e3ProgramParams: string, computeProviderParams: string] & {filter: string, threshold: [bigint, bigint], startWindow: [bigint, bigint], duration: bigint, e3Program: string, e3ProgramParams: string, computeProviderParams: string }
  
    }

  export interface EnclaveInterface extends Interface {
    getFunction(nameOrSignature: "activate" | "ciphernodeRegistry" | "decryptionVerifiers" | "disableE3Program" | "disableEncryptionScheme" | "e3Programs" | "e3ProgramsParams" | "e3s" | "enableE3Program" | "getDecryptionVerifier" | "getE3" | "getInputRoot" | "initialize" | "inputCounts" | "inputs" | "maxDuration" | "nexte3Id" | "owner" | "publishCiphertextOutput" | "publishInput" | "publishPlaintextOutput" | "renounceOwnership" | "request" | "setCiphernodeRegistry" | "setDecryptionVerifier" | "setE3ProgramsParams" | "setMaxDuration" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "AllowedE3ProgramsParamsSet" | "CiphernodeRegistrySet" | "CiphertextOutputPublished" | "E3Activated" | "E3ProgramDisabled" | "E3ProgramEnabled" | "E3Requested" | "EncryptionSchemeDisabled" | "EncryptionSchemeEnabled" | "Initialized" | "InputPublished" | "MaxDurationSet" | "OwnershipTransferred" | "PlaintextOutputPublished"): EventFragment;

    encodeFunctionData(functionFragment: 'activate', values: [BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'ciphernodeRegistry', values?: undefined): string;
encodeFunctionData(functionFragment: 'decryptionVerifiers', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'disableE3Program', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'disableEncryptionScheme', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'e3Programs', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'e3ProgramsParams', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'e3s', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'enableE3Program', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getDecryptionVerifier', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getE3', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getInputRoot', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'initialize', values: [AddressLike, AddressLike, BigNumberish, BytesLike[]]): string;
encodeFunctionData(functionFragment: 'inputCounts', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'inputs', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'maxDuration', values?: undefined): string;
encodeFunctionData(functionFragment: 'nexte3Id', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'publishCiphertextOutput', values: [BigNumberish, BytesLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'publishInput', values: [BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'publishPlaintextOutput', values: [BigNumberish, BytesLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'request', values: [IEnclave.E3RequestParamsStruct]): string;
encodeFunctionData(functionFragment: 'setCiphernodeRegistry', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'setDecryptionVerifier', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'setE3ProgramsParams', values: [BytesLike[]]): string;
encodeFunctionData(functionFragment: 'setMaxDuration', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'activate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ciphernodeRegistry', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'decryptionVerifiers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'disableE3Program', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'disableEncryptionScheme', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'e3Programs', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'e3ProgramsParams', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'e3s', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'enableE3Program', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getDecryptionVerifier', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getE3', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getInputRoot', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'inputCounts', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'inputs', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'maxDuration', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nexte3Id', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'publishCiphertextOutput', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'publishInput', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'publishPlaintextOutput', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'request', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setCiphernodeRegistry', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setDecryptionVerifier', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setE3ProgramsParams', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setMaxDuration', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace AllowedE3ProgramsParamsSetEvent {
      export type InputTuple = [e3ProgramParams: BytesLike[]];
      export type OutputTuple = [e3ProgramParams: string[]];
      export interface OutputObject {e3ProgramParams: string[] };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CiphernodeRegistrySetEvent {
      export type InputTuple = [ciphernodeRegistry: AddressLike];
      export type OutputTuple = [ciphernodeRegistry: string];
      export interface OutputObject {ciphernodeRegistry: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CiphertextOutputPublishedEvent {
      export type InputTuple = [e3Id: BigNumberish, ciphertextOutput: BytesLike];
      export type OutputTuple = [e3Id: bigint, ciphertextOutput: string];
      export interface OutputObject {e3Id: bigint, ciphertextOutput: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace E3ActivatedEvent {
      export type InputTuple = [e3Id: BigNumberish, expiration: BigNumberish, committeePublicKey: BytesLike];
      export type OutputTuple = [e3Id: bigint, expiration: bigint, committeePublicKey: string];
      export interface OutputObject {e3Id: bigint, expiration: bigint, committeePublicKey: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace E3ProgramDisabledEvent {
      export type InputTuple = [e3Program: AddressLike];
      export type OutputTuple = [e3Program: string];
      export interface OutputObject {e3Program: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace E3ProgramEnabledEvent {
      export type InputTuple = [e3Program: AddressLike];
      export type OutputTuple = [e3Program: string];
      export interface OutputObject {e3Program: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace E3RequestedEvent {
      export type InputTuple = [e3Id: BigNumberish, e3: E3Struct, filter: AddressLike, e3Program: AddressLike];
      export type OutputTuple = [e3Id: bigint, e3: E3StructOutput, filter: string, e3Program: string];
      export interface OutputObject {e3Id: bigint, e3: E3StructOutput, filter: string, e3Program: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EncryptionSchemeDisabledEvent {
      export type InputTuple = [encryptionSchemeId: BytesLike];
      export type OutputTuple = [encryptionSchemeId: string];
      export interface OutputObject {encryptionSchemeId: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EncryptionSchemeEnabledEvent {
      export type InputTuple = [encryptionSchemeId: BytesLike];
      export type OutputTuple = [encryptionSchemeId: string];
      export interface OutputObject {encryptionSchemeId: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InitializedEvent {
      export type InputTuple = [version: BigNumberish];
      export type OutputTuple = [version: bigint];
      export interface OutputObject {version: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InputPublishedEvent {
      export type InputTuple = [e3Id: BigNumberish, data: BytesLike, inputHash: BigNumberish, index: BigNumberish];
      export type OutputTuple = [e3Id: bigint, data: string, inputHash: bigint, index: bigint];
      export interface OutputObject {e3Id: bigint, data: string, inputHash: bigint, index: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MaxDurationSetEvent {
      export type InputTuple = [maxDuration: BigNumberish];
      export type OutputTuple = [maxDuration: bigint];
      export interface OutputObject {maxDuration: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PlaintextOutputPublishedEvent {
      export type InputTuple = [e3Id: BigNumberish, plaintextOutput: BytesLike];
      export type OutputTuple = [e3Id: bigint, plaintextOutput: string];
      export interface OutputObject {e3Id: bigint, plaintextOutput: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Enclave extends BaseContract {
    
    connect(runner?: ContractRunner | null): Enclave;
    waitForDeployment(): Promise<this>;

    interface: EnclaveInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    activate: TypedContractMethod<
      [e3Id: BigNumberish, publicKey: BytesLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    ciphernodeRegistry: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    decryptionVerifiers: TypedContractMethod<
      [encryptionSchemeId: BytesLike, ],
      [string],
      'view'
    >
    

    
    disableE3Program: TypedContractMethod<
      [e3Program: AddressLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    disableEncryptionScheme: TypedContractMethod<
      [encryptionSchemeId: BytesLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    e3Programs: TypedContractMethod<
      [e3Program: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    e3ProgramsParams: TypedContractMethod<
      [e3ProgramParams: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    e3s: TypedContractMethod<
      [e3Id: BigNumberish, ],
      [[bigint, bigint, bigint, bigint, string, string, string, string, string, string, string, string] & {seed: bigint, requestBlock: bigint, duration: bigint, expiration: bigint, encryptionSchemeId: string, e3Program: string, e3ProgramParams: string, inputValidator: string, decryptionVerifier: string, committeePublicKey: string, ciphertextOutput: string, plaintextOutput: string }],
      'view'
    >
    

    
    enableE3Program: TypedContractMethod<
      [e3Program: AddressLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    getDecryptionVerifier: TypedContractMethod<
      [encryptionSchemeId: BytesLike, ],
      [string],
      'view'
    >
    

    
    getE3: TypedContractMethod<
      [e3Id: BigNumberish, ],
      [E3StructOutput],
      'view'
    >
    

    
    getInputRoot: TypedContractMethod<
      [e3Id: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    initialize: TypedContractMethod<
      [_owner: AddressLike, _ciphernodeRegistry: AddressLike, _maxDuration: BigNumberish, _e3ProgramsParams: BytesLike[], ],
      [void],
      'nonpayable'
    >
    

    
    inputCounts: TypedContractMethod<
      [e3Id: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    inputs: TypedContractMethod<
      [e3Id: BigNumberish, ],
      [[bigint, bigint] & {size: bigint, depth: bigint }],
      'view'
    >
    

    
    maxDuration: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    nexte3Id: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    publishCiphertextOutput: TypedContractMethod<
      [e3Id: BigNumberish, ciphertextOutput: BytesLike, proof: BytesLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    publishInput: TypedContractMethod<
      [e3Id: BigNumberish, data: BytesLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    publishPlaintextOutput: TypedContractMethod<
      [e3Id: BigNumberish, plaintextOutput: BytesLike, proof: BytesLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    request: TypedContractMethod<
      [requestParams: IEnclave.E3RequestParamsStruct, ],
      [[bigint, E3StructOutput] & {e3Id: bigint, e3: E3StructOutput }],
      'payable'
    >
    

    
    setCiphernodeRegistry: TypedContractMethod<
      [_ciphernodeRegistry: AddressLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    setDecryptionVerifier: TypedContractMethod<
      [encryptionSchemeId: BytesLike, decryptionVerifier: AddressLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    setE3ProgramsParams: TypedContractMethod<
      [_e3ProgramsParams: BytesLike[], ],
      [boolean],
      'nonpayable'
    >
    

    
    setMaxDuration: TypedContractMethod<
      [_maxDuration: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'activate'): TypedContractMethod<
      [e3Id: BigNumberish, publicKey: BytesLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'ciphernodeRegistry'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'decryptionVerifiers'): TypedContractMethod<
      [encryptionSchemeId: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'disableE3Program'): TypedContractMethod<
      [e3Program: AddressLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'disableEncryptionScheme'): TypedContractMethod<
      [encryptionSchemeId: BytesLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'e3Programs'): TypedContractMethod<
      [e3Program: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'e3ProgramsParams'): TypedContractMethod<
      [e3ProgramParams: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'e3s'): TypedContractMethod<
      [e3Id: BigNumberish, ],
      [[bigint, bigint, bigint, bigint, string, string, string, string, string, string, string, string] & {seed: bigint, requestBlock: bigint, duration: bigint, expiration: bigint, encryptionSchemeId: string, e3Program: string, e3ProgramParams: string, inputValidator: string, decryptionVerifier: string, committeePublicKey: string, ciphertextOutput: string, plaintextOutput: string }],
      'view'
    >;
getFunction(nameOrSignature: 'enableE3Program'): TypedContractMethod<
      [e3Program: AddressLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getDecryptionVerifier'): TypedContractMethod<
      [encryptionSchemeId: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getE3'): TypedContractMethod<
      [e3Id: BigNumberish, ],
      [E3StructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getInputRoot'): TypedContractMethod<
      [e3Id: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'initialize'): TypedContractMethod<
      [_owner: AddressLike, _ciphernodeRegistry: AddressLike, _maxDuration: BigNumberish, _e3ProgramsParams: BytesLike[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'inputCounts'): TypedContractMethod<
      [e3Id: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'inputs'): TypedContractMethod<
      [e3Id: BigNumberish, ],
      [[bigint, bigint] & {size: bigint, depth: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'maxDuration'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'nexte3Id'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'publishCiphertextOutput'): TypedContractMethod<
      [e3Id: BigNumberish, ciphertextOutput: BytesLike, proof: BytesLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'publishInput'): TypedContractMethod<
      [e3Id: BigNumberish, data: BytesLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'publishPlaintextOutput'): TypedContractMethod<
      [e3Id: BigNumberish, plaintextOutput: BytesLike, proof: BytesLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'request'): TypedContractMethod<
      [requestParams: IEnclave.E3RequestParamsStruct, ],
      [[bigint, E3StructOutput] & {e3Id: bigint, e3: E3StructOutput }],
      'payable'
    >;
getFunction(nameOrSignature: 'setCiphernodeRegistry'): TypedContractMethod<
      [_ciphernodeRegistry: AddressLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setDecryptionVerifier'): TypedContractMethod<
      [encryptionSchemeId: BytesLike, decryptionVerifier: AddressLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setE3ProgramsParams'): TypedContractMethod<
      [_e3ProgramsParams: BytesLike[], ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setMaxDuration'): TypedContractMethod<
      [_maxDuration: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'AllowedE3ProgramsParamsSet'): TypedContractEvent<AllowedE3ProgramsParamsSetEvent.InputTuple, AllowedE3ProgramsParamsSetEvent.OutputTuple, AllowedE3ProgramsParamsSetEvent.OutputObject>;
getEvent(key: 'CiphernodeRegistrySet'): TypedContractEvent<CiphernodeRegistrySetEvent.InputTuple, CiphernodeRegistrySetEvent.OutputTuple, CiphernodeRegistrySetEvent.OutputObject>;
getEvent(key: 'CiphertextOutputPublished'): TypedContractEvent<CiphertextOutputPublishedEvent.InputTuple, CiphertextOutputPublishedEvent.OutputTuple, CiphertextOutputPublishedEvent.OutputObject>;
getEvent(key: 'E3Activated'): TypedContractEvent<E3ActivatedEvent.InputTuple, E3ActivatedEvent.OutputTuple, E3ActivatedEvent.OutputObject>;
getEvent(key: 'E3ProgramDisabled'): TypedContractEvent<E3ProgramDisabledEvent.InputTuple, E3ProgramDisabledEvent.OutputTuple, E3ProgramDisabledEvent.OutputObject>;
getEvent(key: 'E3ProgramEnabled'): TypedContractEvent<E3ProgramEnabledEvent.InputTuple, E3ProgramEnabledEvent.OutputTuple, E3ProgramEnabledEvent.OutputObject>;
getEvent(key: 'E3Requested'): TypedContractEvent<E3RequestedEvent.InputTuple, E3RequestedEvent.OutputTuple, E3RequestedEvent.OutputObject>;
getEvent(key: 'EncryptionSchemeDisabled'): TypedContractEvent<EncryptionSchemeDisabledEvent.InputTuple, EncryptionSchemeDisabledEvent.OutputTuple, EncryptionSchemeDisabledEvent.OutputObject>;
getEvent(key: 'EncryptionSchemeEnabled'): TypedContractEvent<EncryptionSchemeEnabledEvent.InputTuple, EncryptionSchemeEnabledEvent.OutputTuple, EncryptionSchemeEnabledEvent.OutputObject>;
getEvent(key: 'Initialized'): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
getEvent(key: 'InputPublished'): TypedContractEvent<InputPublishedEvent.InputTuple, InputPublishedEvent.OutputTuple, InputPublishedEvent.OutputObject>;
getEvent(key: 'MaxDurationSet'): TypedContractEvent<MaxDurationSetEvent.InputTuple, MaxDurationSetEvent.OutputTuple, MaxDurationSetEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'PlaintextOutputPublished'): TypedContractEvent<PlaintextOutputPublishedEvent.InputTuple, PlaintextOutputPublishedEvent.OutputTuple, PlaintextOutputPublishedEvent.OutputObject>;

    filters: {
      
      'AllowedE3ProgramsParamsSet(bytes[])': TypedContractEvent<AllowedE3ProgramsParamsSetEvent.InputTuple, AllowedE3ProgramsParamsSetEvent.OutputTuple, AllowedE3ProgramsParamsSetEvent.OutputObject>;
      AllowedE3ProgramsParamsSet: TypedContractEvent<AllowedE3ProgramsParamsSetEvent.InputTuple, AllowedE3ProgramsParamsSetEvent.OutputTuple, AllowedE3ProgramsParamsSetEvent.OutputObject>;
    

      'CiphernodeRegistrySet(address)': TypedContractEvent<CiphernodeRegistrySetEvent.InputTuple, CiphernodeRegistrySetEvent.OutputTuple, CiphernodeRegistrySetEvent.OutputObject>;
      CiphernodeRegistrySet: TypedContractEvent<CiphernodeRegistrySetEvent.InputTuple, CiphernodeRegistrySetEvent.OutputTuple, CiphernodeRegistrySetEvent.OutputObject>;
    

      'CiphertextOutputPublished(uint256,bytes)': TypedContractEvent<CiphertextOutputPublishedEvent.InputTuple, CiphertextOutputPublishedEvent.OutputTuple, CiphertextOutputPublishedEvent.OutputObject>;
      CiphertextOutputPublished: TypedContractEvent<CiphertextOutputPublishedEvent.InputTuple, CiphertextOutputPublishedEvent.OutputTuple, CiphertextOutputPublishedEvent.OutputObject>;
    

      'E3Activated(uint256,uint256,bytes)': TypedContractEvent<E3ActivatedEvent.InputTuple, E3ActivatedEvent.OutputTuple, E3ActivatedEvent.OutputObject>;
      E3Activated: TypedContractEvent<E3ActivatedEvent.InputTuple, E3ActivatedEvent.OutputTuple, E3ActivatedEvent.OutputObject>;
    

      'E3ProgramDisabled(address)': TypedContractEvent<E3ProgramDisabledEvent.InputTuple, E3ProgramDisabledEvent.OutputTuple, E3ProgramDisabledEvent.OutputObject>;
      E3ProgramDisabled: TypedContractEvent<E3ProgramDisabledEvent.InputTuple, E3ProgramDisabledEvent.OutputTuple, E3ProgramDisabledEvent.OutputObject>;
    

      'E3ProgramEnabled(address)': TypedContractEvent<E3ProgramEnabledEvent.InputTuple, E3ProgramEnabledEvent.OutputTuple, E3ProgramEnabledEvent.OutputObject>;
      E3ProgramEnabled: TypedContractEvent<E3ProgramEnabledEvent.InputTuple, E3ProgramEnabledEvent.OutputTuple, E3ProgramEnabledEvent.OutputObject>;
    

      'E3Requested(uint256,tuple,address,address)': TypedContractEvent<E3RequestedEvent.InputTuple, E3RequestedEvent.OutputTuple, E3RequestedEvent.OutputObject>;
      E3Requested: TypedContractEvent<E3RequestedEvent.InputTuple, E3RequestedEvent.OutputTuple, E3RequestedEvent.OutputObject>;
    

      'EncryptionSchemeDisabled(bytes32)': TypedContractEvent<EncryptionSchemeDisabledEvent.InputTuple, EncryptionSchemeDisabledEvent.OutputTuple, EncryptionSchemeDisabledEvent.OutputObject>;
      EncryptionSchemeDisabled: TypedContractEvent<EncryptionSchemeDisabledEvent.InputTuple, EncryptionSchemeDisabledEvent.OutputTuple, EncryptionSchemeDisabledEvent.OutputObject>;
    

      'EncryptionSchemeEnabled(bytes32)': TypedContractEvent<EncryptionSchemeEnabledEvent.InputTuple, EncryptionSchemeEnabledEvent.OutputTuple, EncryptionSchemeEnabledEvent.OutputObject>;
      EncryptionSchemeEnabled: TypedContractEvent<EncryptionSchemeEnabledEvent.InputTuple, EncryptionSchemeEnabledEvent.OutputTuple, EncryptionSchemeEnabledEvent.OutputObject>;
    

      'Initialized(uint64)': TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
      Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    

      'InputPublished(uint256,bytes,uint256,uint256)': TypedContractEvent<InputPublishedEvent.InputTuple, InputPublishedEvent.OutputTuple, InputPublishedEvent.OutputObject>;
      InputPublished: TypedContractEvent<InputPublishedEvent.InputTuple, InputPublishedEvent.OutputTuple, InputPublishedEvent.OutputObject>;
    

      'MaxDurationSet(uint256)': TypedContractEvent<MaxDurationSetEvent.InputTuple, MaxDurationSetEvent.OutputTuple, MaxDurationSetEvent.OutputObject>;
      MaxDurationSet: TypedContractEvent<MaxDurationSetEvent.InputTuple, MaxDurationSetEvent.OutputTuple, MaxDurationSetEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'PlaintextOutputPublished(uint256,bytes)': TypedContractEvent<PlaintextOutputPublishedEvent.InputTuple, PlaintextOutputPublishedEvent.OutputTuple, PlaintextOutputPublishedEvent.OutputObject>;
      PlaintextOutputPublished: TypedContractEvent<PlaintextOutputPublishedEvent.InputTuple, PlaintextOutputPublishedEvent.OutputTuple, PlaintextOutputPublishedEvent.OutputObject>;
    
    };
  }